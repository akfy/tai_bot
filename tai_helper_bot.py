import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import requests
from bs4 import BeautifulSoup

# URL-–∞–¥—Ä–µ—Å –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞
URL = "https://ru.myfin.by/bank/sberbank/currency"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
}

def parse_rate(rate_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    if isinstance(rate_str, str):
        try:
            return round(float(rate_str.replace(',', '.')), 2)  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        except ValueError:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    elif isinstance(rate_str, float):
        return round(rate_str, 2)  # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    return None  # –ï—Å–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

def get_sberbank_rate(currency_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –°–±–µ—Ä–±–∞–Ω–∫–µ (–ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞)."""
    response = requests.get(currency_url, headers=HEADERS)
    
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ {response.status_code}: —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None, None, None

    soup = BeautifulSoup(response.text, "html.parser")
    banks = soup.find_all("tr")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—É—Ä—Å–æ–≤
    usd_rate, eur_rate, cny_rate = None, None, None

    # –ò—â–µ–º –∫—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
    for bank in banks:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è USD
        if bank.find("a", href="/currency/usd"):
            columns = bank.find_all("td")
            if len(columns) >= 3:
                usd_rate = parse_rate(columns[2].text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è EUR
        if bank.find("a", href="/currency/eur"):
            columns = bank.find_all("td")
            if len(columns) >= 3:
                eur_rate = parse_rate(columns[2].text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è CNY
        if bank.find("a", href="/currency/cny"):
            columns = bank.find_all("td")
            if len(columns) >= 3:
                cny_rate = parse_rate(columns[2].text.strip())

    return usd_rate, eur_rate, cny_rate

def get_exchange_rates_tai():
    url = "https://www.superrichthailand.com/api/v1/rates"
    headers = {
        "Cookie": "_ga=GA1.1.1957919004.1739356415; _ga_JJ951DKF1N=GS1.1.1739356414.1.1.1739356446.0.0.0",
        "Authorization": "Basic c3VwZXJyaWNoVGg6aFRoY2lycmVwdXM="
    }
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
        return None, None, None
    
    data = response.json()
    exchange_rates = data.get("data", {}).get("exchangeRate", [])
    
    target_currencies = {"USD": None, "EUR": None, "CNY": None}
    
    for currency in exchange_rates:
        if currency["cUnit"] in target_currencies:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ –Ω–µ –ø—É—Å—Ç
            if currency.get("rate") and len(currency["rate"]) > 0:
                target_currencies[currency["cUnit"]] = parse_rate(currency["rate"][0].get("cSelling"))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    return target_currencies.get("USD"), target_currencies.get("EUR"), target_currencies.get("CNY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ù–∞–ø–∏—à–∏ /rates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /rates
async def get_rates(update: Update, context):
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    usd_thb_rate, eur_thb_rate, cny_thb_rate = get_exchange_rates_tai()
    usd_rub_rate, eur_rub_rate, cny_rub_rate = get_sberbank_rate(URL)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
    üí∞ **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç**:

    üá∫üá∏ USD: {usd_rub_rate} ‚ÇΩ (–°–±–µ—Ä–±–∞–Ω–∫) / {usd_thb_rate} THB (Super Rich Thailand) / {usd_rub_rate / usd_thb_rate:.2f} RUB/THB
    üá™üá∫ EUR: {eur_rub_rate} ‚ÇΩ (–°–±–µ—Ä–±–∞–Ω–∫) / {eur_thb_rate} THB (Super Rich Thailand) / {eur_rub_rate / eur_thb_rate:.2f} RUB/THB
    üá®üá≥ CNY: {cny_rub_rate} ‚ÇΩ (–°–±–µ—Ä–±–∞–Ω–∫) / {cny_thb_rate} THB (Super Rich Thailand) / {cny_rub_rate / cny_thb_rate:.2f} RUB/THB
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
async def message_handler(update: Update, context):
    if update.message.text.startswith('/rates'):
        await get_rates(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def main():
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
    logger = logging.getLogger(__name__)

    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    token = '7570397611:AAGg8ohFxSSEEIzw5TKrlXh1ZKO4mYnd-xE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Application)
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rates", get_rates))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /rates
    application.add_handler(MessageHandler(filters.TEXT, message_handler))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
